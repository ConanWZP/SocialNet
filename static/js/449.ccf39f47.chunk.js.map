{"version":3,"file":"static/js/449.ccf39f47.chunk.js","mappings":"iOA2FA,WAAeA,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KA3BkB,SAACC,GACnB,MAAO,CACHC,QAASD,EAAME,YAAYC,YAC3BC,SAAUJ,EAAME,YAAYG,aAC5BC,eAAgBN,EAAME,YAAYI,mBAIjB,SAACC,GACtB,MAAO,CACHC,cAAe,SAACC,GACZF,GAASG,EAAAA,EAAAA,GAA2BD,SAiB5CE,EAAAA,EAFJ,CAICC,EAAAA,I,oOC7EM,SAASC,EAAWC,GAC1B,OAAO,SAACC,GACP,IAAMC,EAAQ,CAACC,QAAQC,EAAAA,EAAAA,OACjBC,GAAWC,EAAAA,EAAAA,MACjB,OAAO,SAACN,GAAD,kBAAcC,GAAd,IAAqBC,MAAOA,EAAOG,SAAUA,MAErD,IAGKE,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WAmCJ,OAnCIA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,oBAAAA,MAIL,WAEC,IAAIC,EAASC,KAAKR,MAAMC,MAAMC,OAAOK,OAGrC,GAFAE,QAAQC,IAAIH,IAEPA,KACJA,EAASC,KAAKR,MAAMW,kBAInB,OAFAF,QAAQC,IAAI,IAEL,SAAC,KAAD,CAAUE,GAAI,WAKvBJ,KAAKR,MAAMa,eAAeN,GAC1BC,KAAKR,MAAMc,cAAcP,KAQzB,oBAGD,WACC,OACC,SAAC,KAAD,UAAaC,KAAKR,YAEnB,EAnCIM,CAAyBS,EAAAA,WAoD/B,WAAehC,EAAAA,EAAAA,KACdC,EAAAA,EAAAA,KAbqB,SAACC,GAAD,MAAY,CACjC+B,QAAS/B,EAAMgC,YAAYD,QAC3BE,OAAQjC,EAAMgC,YAAYC,OAC1BP,iBAAkB1B,EAAMkC,KAAKZ,UAUJ,CAACM,eAAAA,EAAAA,GAAgBC,cAAAA,EAAAA,GAAeM,iBAAAA,EAAAA,KACzDtB,EAFD,CAKCQ,I,iJChFGe,EAA6B,SAACpC,GAC9B,MAAO,CACHqC,OAAQrC,EAAMkC,KAAKG,SAId1B,EAAmB,SAAC2B,GAAe,IACtCC,EADqC,0IAEvC,WACI,OAAKhB,KAAKR,MAAMsB,QAGT,SAACC,GAAD,UAAef,KAAKR,SAFhB,SAAC,KAAD,CAAUY,GAAI,eAJU,GACXG,EAAAA,WAShC,OADqC/B,EAAAA,EAAAA,IAAQqC,EAARrC,CAAoCwC","sources":["components/Dialogs/DialogsContainer.jsx","components/Profile/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport Profile from \"../Profile/Profile\";\r\nimport {BrowserRouter, Route, Routes} from \"react-router-dom\";\r\nimport {\r\n    submitMessageActionCreator,\r\n    updateNewMessageText,\r\n    updateNewMessageTextActionCreator,\r\n} from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {getUserProfile} from \"../../redux/profile-reducer\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {withRouter} from \"../Profile/ProfileContainer\";\r\n\r\n\r\n\r\n/*const DialogsContainer = (props) => {\r\n\r\n    /!*let state = props.store.getState();\r\n\r\n    let submitMessage = () => {\r\n        /!*let textMessage = newMessageElement.current.value;*!/\r\n        /!*props.submitMessage();*!/\r\n        props.store.dispatch(submitMessageActionCreator());\r\n    }\r\n\r\n    let onMessageText = (text) => {\r\n\r\n        /!*props.updateNewMessageText(text);*!/\r\n        props.store.dispatch(updateNewMessageTextActionCreator(text));\r\n    }*!/\r\n\r\n    return (<StoreContext.Consumer>\r\n            {\r\n                (store) => {\r\n                    let state = store.getState();\r\n\r\n                    let submitMessage = () => {\r\n                        /!*let textMessage = newMessageElement.current.value;*!/\r\n                        /!*props.submitMessage();*!/\r\n                        store.dispatch(submitMessageActionCreator());\r\n                    }\r\n\r\n                    let onMessageText = (text) => {\r\n\r\n                        /!*props.updateNewMessageText(text);*!/\r\n                        store.dispatch(updateNewMessageTextActionCreator(text));\r\n                    }\r\n                    return (\r\n                     <Dialogs submitMessage={submitMessage} updateNewMessageText={onMessageText}\r\n                               dialogs={state.dialogsPage.dialogsData}\r\n                               messages={state.dialogsPage.messagesData}\r\n                               newMessageText={state.dialogsPage.newMessageText} /> )\r\n                }\r\n\r\n\r\n            }\r\n    </StoreContext.Consumer>\r\n    );\r\n}*/\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogs: state.dialogsPage.dialogsData,\r\n        messages: state.dialogsPage.messagesData,\r\n        newMessageText: state.dialogsPage.newMessageText,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        submitMessage: (newMessageBody) => {\r\n            dispatch(submitMessageActionCreator(newMessageBody));\r\n        },\r\n        /*updateNewMessageText: (text) => {\r\n            dispatch(updateNewMessageTextActionCreator(text));\r\n        }*/\r\n    }\r\n}\r\n\r\n/*\r\nconst DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\n\r\nexport default DialogsContainer;\r\n*/\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n(Dialogs)\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Profile from \"./Profile\";\r\nimport axios from \"axios\";\r\nimport {connect} from \"react-redux\";\r\nimport {getUserProfile, getUserStatus, setUserProfile, updateUserStatus} from \"../../redux/profile-reducer\";\r\n\r\n\r\n\r\nimport {Navigate, useNavigate, useParams} from \"react-router-dom\";\r\n\r\nimport {compose} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\n\r\n\r\nexport function withRouter(Children) {\r\n\treturn (props) => {\r\n\t\tconst match = {params: useParams()};\r\n\t\tconst navigate = useNavigate();\r\n\t\treturn <Children {...props} match={match} navigate={navigate}/>\r\n\t}\r\n}\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\t/*let postsDataFromApp = props.postsDataToProfile;*/\r\n\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tlet userId = this.props.match.params.userId;\r\n\t\tconsole.log(userId)\r\n\r\n\t\tif (!userId) {\r\n\t\t\tuserId = this.props.authorizedUserId;\r\n\t\t\tif (!userId) {\r\n\t\t\t\tconsole.log(5)\r\n\t\t\t\t/*this.props.navigate('#/login')*/\r\n\t\t\t\treturn <Navigate to={'/login'} />\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.props.getUserProfile(userId);\r\n\t\tthis.props.getUserStatus(userId);\r\n\r\n\t\t/*usersAPI.getProfileAPI(userId)\r\n\t\t\t.then(data => {\r\n\r\n\t\t\t\tthis.props.setUserProfile(data);\r\n\r\n\t\t\t});*/\r\n\t}\r\n\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Profile {...this.props} />\r\n\t\t);\r\n\t}\r\n\r\n\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n\tprofile: state.profilePage.profile,\r\n\tstatus: state.profilePage.status,\r\n\tauthorizedUserId: state.auth.userId,\r\n})\r\n\r\n\r\n/*let WithUrlDataContainerComponent = withRouter(ProfileContainer);*/\r\n\r\n\r\n/*export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);*/\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, {getUserProfile, getUserStatus, updateUserStatus}),\r\n\twithRouter\r\n\r\n)\r\n(ProfileContainer)","import React from \"react\";\r\nimport {Navigate} from 'react-router-dom';\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render() {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to={'/login'} />\r\n            }\r\n            return <Component {...this.props} />\r\n        }\r\n    }\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n    return ConnectedAuthRedirectComponent;\r\n}"],"names":["compose","connect","state","dialogs","dialogsPage","dialogsData","messages","messagesData","newMessageText","dispatch","submitMessage","newMessageBody","submitMessageActionCreator","withAuthRedirect","Dialogs","withRouter","Children","props","match","params","useParams","navigate","useNavigate","ProfileContainer","userId","this","console","log","authorizedUserId","to","getUserProfile","getUserStatus","React","profile","profilePage","status","auth","updateUserStatus","mapStateToPropsForRedirect","isAuth","Component","RedirectComponent"],"sourceRoot":""}